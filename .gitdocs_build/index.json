{"title":"GitDocs","content":"<a href=\"/Mixeway/MixewayBackend/blob/master/CHANGELOG.md\"><img src=\"https://camo.githubusercontent.com/452f81a1e660cf8f9a47db9405ce06a0f216221b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d6368616e67656c6f672d626c75652e737667\" alt=\"https://img.shields.io/badge/-changelog-blue.svg\" data-canonical-src=\"https://img.shields.io/badge/-changelog-blue.svg\" style=\"max-width:100%;\"></a>\n<a href=\"hub.docker.comd\"><img src=\"https://img.shields.io/docker/pulls/mixeway/backend?logo=Mixeway&style=plastic\" alt=\"https://img.shields.io/badge/-changelog-blue.svg\" data-canonical-src=\"https://img.shields.io/badge/-changelog-blue.svg\" style=\"max-width:100%;\"></a>\n[![Build Status](https://travis-ci.org/Mixeway/MixewayBackend.svg?branch=master)](https://travis-ci.org/Mixeway/MixewayBackend)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Mixeway_MixewayBackend&metric=alert_status)](https://sonarcloud.io/dashboard?id=Mixeway_MixewayBackend)\n[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=Mixeway_MixewayBackend&metric=security_rating)](https://sonarcloud.io/dashboard?id=Mixeway_MixewayBackend)\n\n# Mixeway Backend <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n### Disclaimer:\n> The current version of Mixaway (0.9) is considered as beta. It contains several bugs and vulnerabilities. Every fix\nis put on the board and proceed to make sure version 1.0 will be vulnerability and bug-free. \n\n\n### About Mixeway:\nMixeway is an OpenSource software that is meant to simplify the process of security assurance of projects which are implemented using CICD procedures. **Mixawey is not another vulnerability scanning\nsoftware - it is security orchestration tool**.\n\nWith number of plugins for Vulnerability Scanners :\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">\n\nWith all this available, Mixeway provides functionalities to:\n- Automatic service discovery (IaaS Plugin for assets and network scans for services)\n- Automatic Vulnerability Scan Configuration (Based on most recent configuration) - hands-free!\n- Automatic and on-demand Vulnerability scan execution (based on policy and executed via a REST API call)\n- One Vulnerability Database for all type of sources - SAST, DAST, OpenSource and Infrastructure vulnerabilities in one place\n- Customizable Security Quality Gateway - a reliable piece of information for CICD to decide if a job should pass or not.\n- REST API enables integration with already used Vulnerability Management systems used within the organization.\n\nElements of a system:\n- <a href=\"https://github.com/Mixeway/MixewayBackend\">Backend - Spring Boot REST API</a>\n- <a href=\"https://github.com/Mixeway/MixewayFrontend\">Frontend - Angular 8 application </a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">DB - postgres database</a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">Vault - password store</a>\n- <a href=\"https://github.com/Mixeway/MixewayHub\">MixewayHub - parent project which contain docker-compose and one click instalation </a>\n\n###### Mixeway Backend Description:\nMixeway Backend is a spring boot application that serves REST API both for UserInterface and independent tools for scan creation and runs.\nBackend application also contains vulnerability scanner plugins definitions. Each plugin contains at least 3 operations: configure scan,\nrun scan and load vulnerabilities. This allows mixeway to be completely in charge of the scanning process which allows it to completely\nautomize the vulnerability assessment process.\n\nWith Hashicorp Vault integration passwords for each security scanner (which is the most sensitive component) is properly secured.\n\n<a href=\"https://mixeway.io\">High level informations can be found here</a>\n\n<a href=\"https://mixeway.github.io\">More detailed and technical docs are here</a>\n\n###### Mixeway User Interface Tech stack:\n<img src=\"https://mixeway.github.io/img/spring.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/postgres.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/vault.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/docker.png\" height=\"50px\">\n\n###### Requirements:\n- Running and working DB - <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">docker image</a>\n- Running and working Vault - <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">docker image</a>\n- Docker-compose\n- JAVA 1.8\n- SSL Certificates\n\n###### Running in development mode:\nMake sure that docker is binding properly docker names to a network interface, to make sure put hosts file as follows\n```$xslt\n127.0.0.1 MixerDB MixerVault\n```\nRun DB and Vault dockers. You can do that using docker-compose prepared for development purposes\n```$xslt\ndocker-compose -f docker-compose-db-vault.yml up -d\n```\nMake Sure to generate certificates. You need private key and certificate\n```$xslt\nopenssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n```\nPKCS12 is needed to run backend:\n```$xslt\nopenssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12\n```\nCACERTS file is also needed, make sure You have known the location of it. <a href=\"https://stackoverflow.com/a/11937940/1394504\">It can be found using tips here</a> \n\nFinnaly run\n```\njava -jar --server.ssl.trust-store=/etc/pki/cacerts \\\n          --server.ssl.trust-store-password=changeit \\\n          --server.ssl.key-store=/etc/pki/localhost.p12 \\\n          --server.ssl.key-store-password=changeit \\\n          --server.ssl.keyAlias=localhost \\\n          --spring.profiles.active=dev```"}
