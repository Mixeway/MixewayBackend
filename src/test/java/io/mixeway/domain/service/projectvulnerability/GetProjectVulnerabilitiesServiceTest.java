package io.mixeway.domain.service.projectvulnerability;

import io.mixeway.db.entity.*;
import io.mixeway.db.repository.ProjectRepository;
import io.mixeway.db.repository.ProjectVulnerabilityRepository;
import io.mixeway.db.repository.SettingsRepository;
import io.mixeway.db.repository.UserRepository;
import io.mixeway.domain.service.project.CreateProjectService;
import io.mixeway.domain.service.project.FindProjectService;
import io.mixeway.domain.service.scanmanager.code.CreateOrGetCodeProjectService;
import io.mixeway.domain.service.scanmanager.code.FindCodeProjectService;
import io.mixeway.domain.service.vulnmanager.CreateOrGetVulnerabilityService;
import io.mixeway.domain.service.vulnmanager.VulnTemplate;
import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author gsiewruk
 */
@SpringBootTest
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
class GetProjectVulnerabilitiesServiceTest {
    private final ProjectRepository projectRepository;
    private final UserRepository userRepository;
    private final SettingsRepository settingsRepository;
    private final CreateProjectService createProjectService;
    private final CreateOrGetCodeProjectService createOrGetCodeProjectService;
    private final GetProjectVulnerabilitiesService getProjectVulnerabilitiesService;
    private final VulnTemplate vulnTemplate;
    private final CreateOrGetVulnerabilityService createOrGetVulnerabilityService;
    private final FindProjectService findProjectService;
    private final ProjectVulnerabilityRepository projectVulnerabilityRepository;
    private final FindCodeProjectService findCodeProjectService;

    @Mock
    Principal principal;

    @BeforeEach
    public void prepareDB(){
        Settings settings = settingsRepository.findAll().get(0);
        settings.setMasterApiKey("test");
        settingsRepository.save(settings);
        Mockito.when(principal.getName()).thenReturn("vuln_tester");
        Optional<User> vulnUser = userRepository.findByUsernameOrCommonName("vuln_tester","vuln_tester");
        if (!vulnUser.isPresent() ) {
            User user = new User();
            user.setUsername("vuln_tester");
            user.setPermisions("ROLE_ADMIN");
            userRepository.save(user);
            Project project = createProjectService.createProject("vuln_test","vuln_test",principal);
            CodeProject codeProject = createOrGetCodeProjectService.createCodeProject(project,"vuln_project_name","master");
            for (int i =0 ; i < 5 ; i++) {
                ProjectVulnerability projectVulnerability = new ProjectVulnerability();
                projectVulnerability.setProject(project);
                projectVulnerability.setCodeProject(codeProject);
                projectVulnerability.setSeverity("High");
                projectVulnerability.setAnalysis("Exploitable");
                projectVulnerability.setVulnerabilitySource(vulnTemplate.SOURCE_SOURCECODE);
                projectVulnerability.setVulnerability(createOrGetVulnerabilityService.createOrGetVulnerability("test"));
                vulnTemplate.vulnerabilityPersist(new ArrayList<>(), projectVulnerability);
            }
        }
    }

    @Test
    void getProjectVulnerabilitiesForSource() {
        //Codes
        List<ProjectVulnerability> projectVulnerabilitiesx = projectVulnerabilityRepository.findAll();
        Mockito.when(principal.getName()).thenReturn("vuln_tester");
        Optional<Project> project = findProjectService.findProjectByCiid("vuln_test");
        CodeProject codeProject = createOrGetCodeProjectService.createCodeProject(project.get(),"vuln_project_name","");
        List<ProjectVulnerability> projectVulnerabilities = getProjectVulnerabilitiesService.getProjectVulnerabilitiesForSource(codeProject, "Not an Issue");
        assertTrue(projectVulnerabilities.size() >=5);
    }

    @Test
    void getOldVulnsForGroup() {
        assertTrue(false);
    }

    @Test
    void getOldVulnsForCodeProject() {
        assertTrue(false);
    }

    @Test
    void getOldVulnsForCodeProjectAndSource() {
        assertTrue(false);
    }
}