package io.mixeway.domain.service.projectvulnerability;

import io.mixeway.db.entity.CodeProject;
import io.mixeway.db.entity.Project;
import io.mixeway.db.entity.ProjectVulnerability;
import io.mixeway.db.entity.User;
import io.mixeway.db.repository.ProjectVulnerabilityRepository;
import io.mixeway.db.repository.StatusRepository;
import io.mixeway.db.repository.UserRepository;
import io.mixeway.domain.service.project.GetOrCreateProjectService;
import io.mixeway.domain.service.scanmanager.code.CreateOrGetCodeProjectService;
import io.mixeway.domain.service.vulnmanager.CreateOrGetVulnerabilityService;
import io.mixeway.domain.service.vulnmanager.VulnTemplate;
import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author gsiewruk
 */
@SpringBootTest
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class DeleteProjectVulnerabilityServiceTest {
    private final DeleteProjectVulnerabilityService deleteProjectVulnerabilityService;
    private final GetOrCreateProjectService getOrCreateProjectService;
    private final CreateOrGetCodeProjectService createOrGetCodeProjectService;
    private final VulnTemplate vulnTemplate;
    private final UserRepository userRepository;
    private final StatusRepository statusRepository;
    private final ProjectVulnerabilityRepository projectVulnerabilityRepository;
    private final CreateOrGetVulnerabilityService createOrGetVulnerabilityService;

    @Mock
    Principal principal;

    @BeforeAll
    public void setup(){
        Mockito.when(principal.getName()).thenReturn("delete_pv");
        User userToCreate = new User();
        userToCreate.setUsername("delete_pv");
        userToCreate.setPermisions("ROLE_ADMIN");
        userRepository.save(userToCreate);
    }

    @Test
    @Transactional
    void deleteProjectVulnerabilityWithStatus() {
        Mockito.when(principal.getName()).thenReturn("delete_pv");
        Project project = getOrCreateProjectService.getProjectId("delete_pv","delete_pv",principal);
        CodeProject codeProject = createOrGetCodeProjectService.createCodeProject(project,"delete_pv","master");
        for (int i =0 ; i < 5 ; i++) {
            ProjectVulnerability projectVulnerability = new ProjectVulnerability();
            projectVulnerability.setProject(project);
            projectVulnerability.setCodeProject(codeProject);
            projectVulnerability.setSeverity("High");
            projectVulnerability.setStatus(statusRepository.findByName("NEW"));
            projectVulnerability.setAnalysis("Exploitable");
            projectVulnerability.setVulnerabilitySource(vulnTemplate.SOURCE_SOURCECODE);
            vulnTemplate.vulnerabilityPersist(new ArrayList<>(), projectVulnerability);
        }

        deleteProjectVulnerabilityService.deleteProjectVulnerabilityWithStatus(project,statusRepository.findByName("NEW"));
        assertEquals(0, (int) projectVulnerabilityRepository.findByProject(project).count());
    }

    @Test
    @Transactional
    void removeByCodeProject() {
        Mockito.when(principal.getName()).thenReturn("delete_pv");
        Project project = getOrCreateProjectService.getProjectId("delete_pv2","delete_pv2",principal);
        CodeProject codeProject = createOrGetCodeProjectService.createCodeProject(project,"delete_pv2","master");
        for (int i =0 ; i < 5 ; i++) {
            ProjectVulnerability projectVulnerability = new ProjectVulnerability();
            projectVulnerability.setProject(project);
            projectVulnerability.setCodeProject(codeProject);
            projectVulnerability.setSeverity("High");
            projectVulnerability.setStatus(vulnTemplate.STATUS_REMOVED);
            projectVulnerability.setAnalysis("Exploitable");
            projectVulnerability.setVulnerability(createOrGetVulnerabilityService.createOrGetVulnerability("test"));
            projectVulnerability.setVulnerabilitySource(vulnTemplate.SOURCE_SOURCECODE);
            vulnTemplate.vulnerabilityPersist(new ArrayList<>(), projectVulnerability);
        }
        List<ProjectVulnerability> projectVulnerabilities = vulnTemplate.projectVulnerabilityRepository.findByCodeProject(codeProject);
        projectVulnerabilities.forEach(pv -> pv.setStatus(vulnTemplate.STATUS_REMOVED));
        vulnTemplate.projectVulnerabilityRepository.saveAll(projectVulnerabilities);
        deleteProjectVulnerabilityService.removeByCodeProject(codeProject);
        assertEquals(0, (int) projectVulnerabilityRepository.findByProject(project).count());

    }
}