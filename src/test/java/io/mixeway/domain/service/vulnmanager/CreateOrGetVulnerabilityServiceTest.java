package io.mixeway.domain.service.vulnmanager;

import io.mixeway.db.entity.Vulnerability;
import io.mixeway.db.repository.VulnerabilityRepository;
import lombok.AllArgsConstructor;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author gsiewruk
 */
@SpringBootTest
@AllArgsConstructor(onConstructor = @__(@Autowired))
class CreateOrGetVulnerabilityServiceTest {

    private final VulnerabilityRepository vulnerabilityRepository;
    private final CreateOrGetVulnerabilityService createOrGetVulnerabilityService;

    @Test
    void createOrGetVulnerability() {
        Vulnerability vulnerability = createOrGetVulnerabilityService.createOrGetVulnerability("test");
        assertEquals(vulnerability.getId(), vulnerabilityRepository.findByName("test").get().getId());
        Vulnerability vulnerability2 = createOrGetVulnerabilityService.createOrGetVulnerability("test");
        assertEquals(vulnerability2.getId(), vulnerabilityRepository.findByName("test").get().getId());


    }

    @Test
    void createOrGetVulnerabilityWithDescAndReferences() {
        Vulnerability vulnerability = createOrGetVulnerabilityService
                .createOrGetVulnerabilityWithDescAndReferences("test_2","testdesc","testrefs","testrec");
        assertEquals(vulnerability.getId(), vulnerabilityRepository.findByName("test_2").get().getId());
        Vulnerability vulnerability2 = createOrGetVulnerabilityService
                .createOrGetVulnerabilityWithDescAndReferences("test_2","testdesc","testrefs","testrec");
        assertEquals(vulnerability2.getId(), vulnerabilityRepository.findByName("test_2").get().getId());

    }

    @Test
    void createOrGetVulnerabilityWithRecommendationAndReferences() {
        Vulnerability vulnerability = createOrGetVulnerabilityService
                .createOrGetVulnerabilityWithRecommendationAndReferences("test_3","testrefs","testrec");
        assertEquals(vulnerability.getId(), vulnerabilityRepository.findByName("test_3").get().getId());
        Vulnerability vulnerability2 = createOrGetVulnerabilityService
                .createOrGetVulnerabilityWithRecommendationAndReferences("test_3","testrefs","testrec");
        assertEquals(vulnerability2.getId(), vulnerabilityRepository.findByName("test_3").get().getId());
    }
}