package io.mixeway.db.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.mixeway.config.Constants;
import io.mixeway.domain.service.vulnerability.VulnTemplate;
import io.mixeway.integrations.webappscan.plugin.burpee.model.Issue;
import io.mixeway.pojo.VulnSource;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.util.StringUtils;

import javax.persistence.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * @author gsiewruk
 */
@Entity
@EntityScan
@Table(
        name = "projectvulnerability",
        indexes = {
                @Index(columnList = "id, project_id, vulnerability_id,codeproject_id, webapp_id, softwarepacket_id, interface_id",name="projectvulnerability_index")
        })
@EntityListeners(AuditingEntityListener.class)
public class ProjectVulnerability {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "project_id")
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JsonIgnore
    private Project project;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "webapp_id")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private WebApp webApp;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "codeproject_id")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private CodeProject codeProject;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "interface_id")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Interface anInterface;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "softwarepacket_id")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private SoftwarePacket softwarePacket;
    private String description;
    private String recommendation;
    private String severity;
    private String inserted;
    private String location;
    @Column(name = "externalid")
    private int externalId;
    @Column(name="ticketid")
    private int ticketId;
    @ManyToOne(fetch = FetchType.EAGER, optional = true)
    @JoinColumn(name = "status_id", nullable = true)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Status status;
    private String analysis;
    private String port;
    private int grade;
    @ManyToOne(fetch = FetchType.EAGER, optional = false)
    @JoinColumn(name = "vulnerabilitysource_id", nullable = false)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private VulnerabilitySource vulnerabilitySource;
    @ManyToOne(fetch = FetchType.EAGER, optional = false)
    @JoinColumn(name = "vulnerability_id", nullable = false)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Vulnerability vulnerability;

    /**
     * Constructor ProjectVulnerability
     */
    public <V extends VulnSource> ProjectVulnerability(V source,CodeProject codeProject, Vulnerability vulnerability, String description,
                                                       String recommendation, String severity, String port, String location, String analysis,
                                                       VulnerabilitySource vulnerabilitySource) {
        this.location = location;
        if (source instanceof Interface){
            this.anInterface = (Interface)source;
            this.project = ((Interface) source).getAsset().getProject();
            this.location = ((Interface)source).getAsset().getName();
        } else if ( source instanceof WebApp){
            this.webApp = (WebApp) source;
            this.project = ((WebApp)source).getProject();
        } else if( source instanceof CodeProject){
            this.codeProject = (CodeProject) source;
            this.project = ((CodeProject) source).getCodeGroup().getProject();
        } else if (source instanceof SoftwarePacket){
            this.softwarePacket = (SoftwarePacket)source;
            this.location = ((SoftwarePacket)source).getName();
            this.project = codeProject.getCodeGroup().getProject();
            this.codeProject = codeProject;
        }
        this.inserted = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date());
        this.vulnerability = vulnerability;
        this.description = description;
        this.recommendation = recommendation;
        this.severity = severity;
        this.port = port;
        this.analysis = analysis;
        this.vulnerabilitySource = vulnerabilitySource;
    }


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Project getProject() {
        return project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    public WebApp getWebApp() {
        return webApp;
    }

    public void setWebApp(WebApp webApp) {
        this.webApp = webApp;
    }

    public CodeProject getCodeProject() {
        return codeProject;
    }

    public void setCodeProject(CodeProject codeProject) {
        this.codeProject = codeProject;
    }

    public Interface getAnInterface() {
        return anInterface;
    }

    public void setAnInterface(Interface anInterface) {
        this.anInterface = anInterface;
    }

    public SoftwarePacket getSoftwarePacket() {
        return softwarePacket;
    }

    public void setSoftwarePacket(SoftwarePacket softwarePacket) {
        this.softwarePacket = softwarePacket;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getRecommendation() {
        return recommendation;
    }

    public void setRecommendation(String recommendation) {
        this.recommendation = recommendation;
    }

    public String getSeverity() {
        return severity;
    }

    public void setSeverity(String severity) {
        this.severity = severity;
    }

    public String getInserted() {
        return inserted;
    }

    public void setInserted(String inserted) {
        this.inserted = inserted;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public int getExternalId() {
        return externalId;
    }

    public void setExternalId(int externalId) {
        this.externalId = externalId;
    }

    public int getTicketId() {
        return ticketId;
    }

    public void setTicketId(int ticketId) {
        this.ticketId = ticketId;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public String getAnalysis() {
        return analysis;
    }

    public void setAnalysis(String analysis) {
        this.analysis = analysis;
    }

    public String getPort() {
        return port;
    }

    public void setPort(String port) {
        this.port = port;
    }

    public int getGrade() {
        return grade;
    }

    public void setGrade(int grade) {
        this.grade = grade;
    }

    public VulnerabilitySource getVulnerabilitySource() {
        return vulnerabilitySource;
    }

    public void setVulnerabilitySource(VulnerabilitySource vulnerabilitySource) {
        this.vulnerabilitySource = vulnerabilitySource;
    }

    public Vulnerability getVulnerability() {
        return vulnerability;
    }

    public void setVulnerability(Vulnerability vulnerability) {
        this.vulnerability = vulnerability;
    }

    /**
     * Setting grade to -1 while vulnerability creation
     */
    public ProjectVulnerability(){
        this.grade = -1;
    }

    /**
     * Updates information for vulnerability of type OpenSource
     * @param score
     * @param format
     * @param softwarePacket
     * @param project
     * @param description
     */
    public void updateOpenSourceVulnInfo(Double score, String format, SoftwarePacket softwarePacket, Project project, String description) {
        if (score >= 0.1 && score <= 3.9) {
            this.severity = Constants.API_SEVERITY_LOW;
        } else if (score >= 4.0 && score <= 6.9) {
            this.severity = Constants.API_SEVERITY_MEDIUM;
        } else if (score >= 7.0 && score <= 8.9) {
            this.severity = Constants.API_SEVERITY_HIGH;
        } else {
            this.severity = Constants.API_SEVERITY_CRITICAL;
        }
        this.inserted = format;
        this.softwarePacket = softwarePacket;
        this.project = project;
        this.description = description;
    }
    /**
     * Used for burp loadVulnerabilities
     *
     * @param webApp which contains vuln
     * @param issue get from burp REST API
     */
    public ProjectVulnerability(WebApp webApp, Issue issue, Vulnerability vulnerability, VulnerabilitySource vulnerabilitySource){
        this.webApp = webApp;
        this.project = webApp.getProject();
        this.vulnerabilitySource = vulnerabilitySource;
        this.description = issue.getDescription();
        this.vulnerability = vulnerability;
        this.severity = StringUtils.capitalize(issue.getSeverity());
        this.location = issue.getOrigin()+issue.getPath();

    }

    /**
     * Updates status and Grade for vulnerability
     * @param oldVulns
     */
    public void updateStatusAndGrade(List<ProjectVulnerability> oldVulns, VulnTemplate vulnTemplate) {
        if (oldVulns.stream().anyMatch(infrastructureVuln -> infrastructureVuln.getVulnerability().equals(this.getVulnerability()) && infrastructureVuln.getDescription().equals(this.getDescription())
                && infrastructureVuln.getSeverity().equals(this.getSeverity()) && infrastructureVuln.getPort().equals(this.getPort()))){
            this.status = vulnTemplate.STATUS_EXISTING;
            Optional<ProjectVulnerability> infrastructureVuln = oldVulns.stream().filter(vold -> vold.getVulnerability().equals(this.vulnerability) && vold.getDescription().equals(this.getDescription())
                    && vold.getSeverity().equals(this.getSeverity()) && vold.getPort().equals(this.getPort())).findFirst();
            infrastructureVuln.ifPresent(value -> this.setGrade(value.getGrade()));
        } else {
            this.setStatus(vulnTemplate.STATUS_NEW);
        }
        if (this.status.getName().equals(Constants.STATUS_NEW))
            this.grade = -1;
    }
    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof ProjectVulnerability))
            return false;
        ProjectVulnerability other = (ProjectVulnerability) o;
        if (other.externalId > 0) {
            return other.externalId == this.externalId;
        } else {
            return (other.location.equals(this.location) && (other.vulnerability.getId().equals(this.vulnerability.getId())) &&
                    this.vulnerabilitySource.getId().equals(other.vulnerabilitySource.getId()) && (this.description.equals(other.getDescription())));
        }
    }
    @Override
    public final int hashCode() {
        int prime = 31;
        int result = 1;
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.location == null) ? 0 : this.location.hashCode());
        result = prime * result + ((this.vulnerabilitySource.getName() == null) ? 0 : this.vulnerabilitySource.getName().hashCode());
        result = prime * result + ((this.vulnerability.getName() == null) ? 0 : this.vulnerability.getName().hashCode());
        return result;
    }
}
