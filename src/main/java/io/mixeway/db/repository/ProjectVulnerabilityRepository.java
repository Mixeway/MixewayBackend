package io.mixeway.db.repository;

import io.mixeway.db.entity.*;
import io.mixeway.pojo.VulnBarChartProjection;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;

/**
 * @author gsiewruk
 */
public interface ProjectVulnerabilityRepository extends JpaRepository<ProjectVulnerability, Long> {
    //<editor-fold desc="Source Code Vulnerabilities">
    @Query(value = "select v from ProjectVulnerability v where v.codeProject = :codeProject")
    List<ProjectVulnerability> getVulnerabilitiesByCodeProject(@Param("codeProject") CodeProject codeProject);
    List<ProjectVulnerability> findByCodeProjectAndAnalysisNot(CodeProject codeProject, String analysis);
    List<ProjectVulnerability> findByCodeProjectInAndAnalysisNot(List<CodeProject> codeProjects, String analysis);
    List<ProjectVulnerability> findByCodeProject(CodeProject codeProject);
    List<ProjectVulnerability> findByCodeProjectIn(List<CodeProject> codeProject);
    void deleteByCodeProject(CodeProject codeProject);
    void deleteByCodeProjectIn(List<CodeProject> codeProjects);
    List<ProjectVulnerability> findByCodeProjectAndSeverityAndAnalysis(CodeProject codeProject, String severity, String analysis);
    Stream<ProjectVulnerability> findByProjectAndVulnerabilitySourceAndAnalysisNot(Project project, VulnerabilitySource source, String analyis);
    @Query(value="select count(pv.*) as value, v.name as namee from projectvulnerability pv, vulnerability v, vulnerabilitysource source where v.id=pv.vulnerability_id " +
            "and pv.severity in ('Critical','High') and analysis != 'Not an Issue' and source.id=pv.vulnerabilitysource_id and source.name='SourceCode' and pv.project_id in :projects group by v.id order by value desc limit 10", nativeQuery = true)
    List<VulnBarChartProjection> top10CodeVulns(@Param("projects") List<Long> projects);
    @Query(value="select count(pv.*) as value, cp.name || '( '|| p.name||')' as namee from projectvulnerability pv, " +
            "codeproject cp, project p where p.id=pv.project_id and cp.id=pv.codeproject_id and pv.project_id in :projects group by cp.id, p.name order by value desc limit 10", nativeQuery = true)
    List<VulnBarChartProjection> top10CodeProjects(@Param("projects") List<Long> projects);
    Long countByCodeProjectInAndSeverityAndAnalysis(List<CodeProject> codeProject, String severity, String analysis);
    Long countByCodeProjectInAndSeverityAndAnalysisNot(List<CodeProject> codeProject, String severity, String analysis);
    Stream<ProjectVulnerability> findByVulnerabilitySourceAndAnalysisNot(VulnerabilitySource vulnerabilitySource, String analysisNot);
    Stream<ProjectVulnerability> findByProjectInAndVulnerabilitySourceAndAnalysisNot(List<Project> project,VulnerabilitySource vulnerabilitySource, String analysisNot);
    Stream<ProjectVulnerability> findByCodeProjectAndVulnerabilitySource(CodeProject cp, VulnerabilitySource vulnerabilitySource);
    List<ProjectVulnerability> findByVulnerabilitySourceAndCodeProject(VulnerabilitySource vulnerabilitySource, CodeProject cp);
    Stream<ProjectVulnerability> findByProjectAndVulnerabilitySourceAndAnalysis(Project project, VulnerabilitySource vs, String analysis);
    @Query(value = "select ((count(*) filter (where severity='Critical') * :critWage) + (count(*) filter (where severity='High') * :highWage)) from " +
            "projectvulnerability where project_id=:project_id and vulnerabilitysource_id = (select id from vulnerabilitysource where name='SourceCode')", nativeQuery = true)
    int countCodeRiskForProject(@Param("project_id")Long project_id,@Param("critWage") int critWage, @Param("highWage") int highWage);
    @Query(value = "select ((count(*) filter (where severity='Critical') * :critWage) + (count(*) filter (where severity='High') * :highWage)) from " +
            "projectvulnerability where codeproject_id =:codeProject_id and analysis =!:analysis and vulnerabilitysource_id = (select id from vulnerabilitysource where name='SourceCode')", nativeQuery = true)
    int countRiskForCodeProject(@Param("codeProject_id")Long codeProject_id,@Param("critWage") int critWage, @Param("highWage") int highWage,
                                @Param("analysis") String analysis);
    @Query(value="select count(*) from projectvulnerability where codeproject_id=?1 and severity=?2 and analysis=?3 and vulnerabilitysource_id = (select id from vulnerabilitysource where name='SourceCode'", nativeQuery = true)
    Long getCountByCodeProjectIdSeverityAndAnalysis(@Param("id") Long id, @Param("severity") String severity, @Param("analysis") String analysis);
    //</editor-fold>

    //<editor-fold desc="Infrastructure Vulnerabilities">
    List<ProjectVulnerability> findByProjectAndVulnerabilitySourceAndSeverityNotIn(Project project, VulnerabilitySource vulnerabilitySource, List<String> severities);
    List<ProjectVulnerability> findByProjectAndVulnerabilitySourceAndSeverityIn(Project project, VulnerabilitySource vulnerabilitySource, List<String> severities);
    List<ProjectVulnerability> findByAnInterface(Interface anInterface);
    void deleteByAnInterface(Interface anInterface);
    @Query(value="select distinct v.port from ProjectVulnerability v where v.anInterface = :interface and v.vulnerabilitySource.name='Service Detection'")
    List<String> getPortsFromInfraVulnForInterface(@Param("interface") Interface anInterface);
    @Query(value="select count(pv.*) as value, v.name as namee from projectvulnerability pv, vulnerability v, vulnerabilitysource vs where " +
            "vs.id=pv.vulnerabilitysource_id and pv.vulnerability_id=v.id and vs.name='Network' and pv.severity in ('Critic','Critical','High') and pv.project_id in :projects group " +
            "by v.name order by value desc limit 10", nativeQuery = true)
    List<VulnBarChartProjection> top10InfraVulns(@Param("projects") List<Long> projects);
    @Query(value="select count(*) as value, i.privateip||' ('||p.name||')' as namee from project p, projectvulnerability iv, interface i, asset a,vulnerabilitysource so where p.id=iv.project_Id and so.id=iv.vulnerabilitysource_id " +
            "and so.name='Network' and iv.project_id in :projects and iv.interface_id=i.id and i.asset_id=a.id and iv.severity in ('Critical','High') group by namee order by value desc limit 10",nativeQuery = true)
    List<VulnBarChartProjection> top10Interfaces(@Param("projects") List<Long> projects);
    Long countByAnInterfaceInAndSeverity(List<Interface> interfaces, String severity);
    Stream<ProjectVulnerability> findByanInterfaceInAndSeverityNotIn(List<Interface> interfaces, List<String> severities);
    Stream<ProjectVulnerability> findByanInterfaceIn(List<Interface> interfaces);
    @Query(value = "SELECT i from ProjectVulnerability i where i.anInterface in :interfaces and i.port like '%www%'")
    List<ProjectVulnerability> getVulnsByInterfacesAndWithWWW(@Param("interfaces") List<Interface> interfaces);
    @Query(value = "select ((count(*) filter (where severity='Critical') * :critWage) + (count(*) filter (where severity='High') * :highWage) + (count(*) filter (where severity='Medium') * :mediumWage)) from " +
            "projectvulnerability where interface_id in (select id from interface where asset_id in (select id from asset where project_id =:project_id)) and " +
            "vulnerabilitysource_id = (select id from vulnerabilitysource where name='Network')", nativeQuery = true)
    int countNetworkRiskForProject(@Param("project_id")Long project_id,@Param("critWage") int critWage, @Param("highWage") int highWage,@Param("mediumWage") int mediumWage);
    @Query(value = "select ((count(*) filter (where severity='Critical') * :critWage) + (count(*) filter (where severity='High') * :highWage) + (count(*) filter (where severity='Medium') * :mediumWage)) from " +
            "projectvulnerability where interface_id =:interface_id and vulnerabilitysource_id = (select id from vulnerabilitysource where name='Network')", nativeQuery = true)
    int countRiskForInterface(@Param("interface_id")Long interface_id,@Param("critWage") int critWage, @Param("highWage") int highWage,@Param("mediumWage") int mediumWage);
    //</editor-fold>

    //<editor-fold desc="OpenSource Vulenrabilities">
    @Query(value="select distinct(v.*) from projectvulnerability v, codeproject_softwarepacket csp, vulnerabilitysource s where v.softwarepacket_id = csp.softwarepacket_id " +
            "and csp.codeproject_id = ?1 and s.id=v.vulnerabilitysource_id and s.name='OpenSource'", nativeQuery = true)
    List<ProjectVulnerability> getSoftwareVulnsForCodeProject(@Param("id") Long id);
    Optional<ProjectVulnerability> findBySoftwarePacketAndVulnerability(SoftwarePacket softwarePacket, Vulnerability vulnerability);
    Optional<ProjectVulnerability> findBySoftwarePacketAndVulnerabilityAndCodeProject(SoftwarePacket softwarePacket, Vulnerability vulnerability, CodeProject codeProject);
    @Query(value = "select count(spv) as value, sp.name as namee from softwarepacket sp inner join projectvulnerability spv on " +
            "spv.softwarepacket_id=sp.id inner join vulnerabilitysource vs on vs.id=spv.vulnerabilitysource_id where vs.name='OpenSource' and " +
            "spv.severity in ('Critic', 'Critical', 'High') and spv.project_id in :projects group by sp.name order by value desc limit 10", nativeQuery = true)
    List<VulnBarChartProjection> top10OpenSource(@Param("projects") List<Long> projects);
    @Query(value="select count(spv) as value, cp.name||' ('||p.name||')' as namee from codeproject cp " +
            "inner join projectvulnerability spv on cp.id = spv.codeproject_id inner join project p on " +
            "p.id=spv.project_id inner join vulnerabilitysource vs on vs.id=spv.vulnerabilitysource_id where vs.name='OpenSource' and spv.severity in " +
            "('Critic', 'Critical', 'High') and spv.project_id in :projects group by cp.name, p.name order by value desc limit 10", nativeQuery = true)
    List<VulnBarChartProjection> top10OpenSourceCodeProjects(@Param("projects") List<Long> projects);
    Optional<ProjectVulnerability> findByVulnerabilityAndVulnerabilitySource(Vulnerability vulnerability, VulnerabilitySource vulnerabilitySource);
    @Query(value="select spv.* from projectvulnerability spv, codeproject_softwarepacket csp where spv.softwarepacket_id = csp.softwarepacket_id " +
            "and csp.codeproject_id in (select id from codeproject where codegroup_id in (select id from codegroup where project_id = ?1)) and spv.severity = ?2", nativeQuery = true)
    List<ProjectVulnerability> getSoftwareVulnsForProjectAndSeverity(@Param("id") Long id, @Param("severity") String severity);

    //</editor-fold>

    //<editor-fold desc="WebApplication Vulnerabilities">
    @Query(value = "select count(*) as value, w.url ||' ('||p.name||')' as namee from project p, projectvulnerability wv, webapp w, " +
            "vulnerabilitysource vs where vs.id=wv.vulnerabilitysource_id and vs.name='WebApplication' and p.id=wv.project_id and w.id=wv.webapp_id " +
            "and wv.severity in ('High','Critical') and wv.project_id in :projects  group by w.url,p.name order by value desc limit 10", nativeQuery = true)
    List<VulnBarChartProjection> top10WebApps(@Param("projects") List<Long> projects);
    @Query(value = "select count(pv.*) as value, v.name as namee from projectvulnerability pv, vulnerability v, vulnerabilitysource vs where " +
            "vs.id=pv.vulnerabilitysource_id and pv.vulnerability_id=v.id and vs.name='WebApplication' and pv.severity in ('Critic','Critical','High') and pv.project_id in :projects" +
            " group by v.name order by value desc limit 10", nativeQuery = true)
    List<VulnBarChartProjection> top10WebAppVulns(@Param("projects") List<Long> projects);
    Long countByWebAppInAndSeverity(List<WebApp> webApps, String severity);
    List<ProjectVulnerability> findByWebAppInAndVulnerabilitySource(List<WebApp> webApps, VulnerabilitySource vs);
    void deleteBySoftwarePacket(SoftwarePacket softwarePacket);
    List<ProjectVulnerability> findByWebApp(WebApp webApp);
    void deleteByWebApp(WebApp webApp);
    Stream<ProjectVulnerability> findByWebAppInAndVulnerabilitySourceAndSeverityIn(List<WebApp> webApps, VulnerabilitySource vulnerabilitySource, List<String> severities);
    @Query(value = "select ((count(*) filter (where severity='Critical') * :critWage) + (count(*) filter (where severity='High') * :highWage) + (count(*) filter (where severity='Medium') * :mediumWage)) from " +
            "projectvulnerability where webapp_id in (select id from webapp where project_id=:project_id) and vulnerabilitysource_id = (select id from vulnerabilitysource where name='WebApplication')", nativeQuery = true)
    int countWebAppRiskForProject(@Param("project_id")Long project_id,@Param("critWage") int critWage, @Param("highWage") int highWage,@Param("mediumWage") int mediumWage);
    @Query(value = "select ((count(*) filter (where severity='Critical') * :critWage) + (count(*) filter (where severity='High') * :highWage) + (count(*) filter (where severity='Medium') * :mediumWage)) from " +
            "projectvulnerability where webapp_id =:webapp_id and vulnerabilitysource_id = (select id from vulnerabilitysource where name='WebApplication')", nativeQuery = true)
    int countRiskForWebApp(@Param("webapp_id")Long webapp_id,@Param("critWage") int critWage, @Param("highWage") int highWage,@Param("mediumWage") int mediumWage);
    //</editor-fold>

    //<editor-fold desc="General Vulnerabilities">
    Stream<ProjectVulnerability> findByProject(Project project);
    Stream<ProjectVulnerability> findByProjectAndVulnerabilitySource(Project project, VulnerabilitySource vulnerabilitySource);
    Stream<ProjectVulnerability> findByProjectAndVulnerabilitySourceAndSeverity(Project project, VulnerabilitySource vulnerabilitySource, String severity);
    Stream<ProjectVulnerability> findByVulnerabilitySource(VulnerabilitySource vulnerabilitySource);
    Stream<ProjectVulnerability> findByProjectInAndVulnerabilitySource(List<Project> projects, VulnerabilitySource vulnerabilitySource);
    Stream<ProjectVulnerability> findByCodeProjectAndVulnerabilitySourceAndSeverity(CodeProject cp, VulnerabilitySource vs, String severity);
    Stream<ProjectVulnerability> findByCodeProjectAndVulnerabilitySourceAndSeverityIn(CodeProject cp, VulnerabilitySource vs, List<String> severity);
    Stream<ProjectVulnerability> findByCodeProjectAndVulnerabilitySourceAndSeverityAndAnalysis(CodeProject cp, VulnerabilitySource vs, String severity, String analysis);
    Stream<ProjectVulnerability> findByCodeProjectAndVulnerabilitySourceAndSeverityAndAnalysisNot(CodeProject cp, VulnerabilitySource vs, String severity, String analysis);
    List<ProjectVulnerability> findTop100ByVulnerabilityIn(List<Vulnerability> vulnerabilities);
    Stream<ProjectVulnerability> findByProjectAndSeverityIn(Project project, List<String> severities);

    @Modifying
    @Query(value = "update projectvulnerability set status_id = :status where id in :vulns", nativeQuery = true)
    void updateVulnState(@Param("vulns") List<Long> tmpVulns,@Param("status") Long status);
    void deleteByStatus(Status status);
    int deleteByStatusAndCodeProjectAndVulnerabilitySource(Status status, CodeProject codeProject, VulnerabilitySource vulnerabilitySource);
    @Modifying
    @Query(value = "delete from ProjectVulnerability pv where pv.id in :ids")
    int deleteProjectVulnerabilityIn(@Param("ids") List<Long> ids);
    List<ProjectVulnerability> findByGrade(int grade);
    List<ProjectVulnerability> findByGradeAndProject(int grade, Project project);

    List findByanInterfaceInAndStatusIn(List<Interface> intfs,List<Status> status);
    //</editor-fold>

    List<ProjectVulnerability> findByAnInterfaceAndVulnerabilitySource(Interface anInterface, VulnerabilitySource vulnerabilitySource);
    List<ProjectVulnerability> findByProjectAndVulnerabilitySourceAndTicketIdNotNull(Project project, VulnerabilitySource vulnerabilitySource);
    List<ProjectVulnerability> findByCodeProjectAndVulnerabilitySourceAndTicketIdIsNullAndSeverityIn(CodeProject codeProject, VulnerabilitySource vulnerabilitySource, List<String> severity);
    Long countByProjectAndTicketId(Project project, String ticketId);
    @Query(value = "select v from ProjectVulnerability v where v.project in :projects and v.severity in ('High','Critical','Medium') order by v.inserted desc")
    List<ProjectVulnerability> getLatestVulnerabilitiesForProjects(@Param("projects") List<Project> projects);
}
