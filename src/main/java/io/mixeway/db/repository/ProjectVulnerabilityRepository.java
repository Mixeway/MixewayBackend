package io.mixeway.db.repository;

import io.mixeway.db.entity.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

/**
 * @author gsiewruk
 */
public interface ProjectVulnerabilityRepository extends JpaRepository<ProjectVulnerability, Long> {
    // Source Code Vulnerabilities
    @Query(value = "select v from ProjectVulnerability v where v.codeProject = :codeProject")
    List<ProjectVulnerability> getVulnerabilitiesByCodeProject(@Param("codeProject") CodeProject codeProject);
    List<ProjectVulnerability> findByCodeProjectAndAnalysisNot(CodeProject codeProject, String analysis);
    List<ProjectVulnerability> findByCodeProjectInAndAnalysisNot(List<CodeProject> codeProjects, String analysis);
    List<ProjectVulnerability> findByCodeProject(CodeProject codeProject);
    List<ProjectVulnerability> findByCodeProjectIn(List<CodeProject> codeProject);
    void deleteByCodeProject(CodeProject codeProject);
    void deleteByCodeProjectIn(List<CodeProject> codeProjects);
    List<ProjectVulnerability> findByCodeProjectAndSeverityAndAnalysis(CodeProject codeProject, String severity, String analysis);

    //OpenSource
    Optional<ProjectVulnerability> findByVulnerabilityAndVulnerabilitySource(Vulnerability vulnerability, VulnerabilitySource vulnerabilitySource);


    //Infrastructure
    List<ProjectVulnerability> findByProjectAndVulnerabilitySourceAndSeverityNotIn(Project project, VulnerabilitySource vulnerabilitySource, List<String> severities);
    List<ProjectVulnerability> findByAnInterface(Interface anInterface);
    void deleteByAnInterface(Interface anInterface);
    @Query(value="select distinct v.port from ProjectVulnerability v where v.anInterface = :interface and v.vulnerabilitySource.name='Service Detection'")
    List<String> getPortsFromInfraVulnForInterface(@Param("interface") Interface anInterface);
}
