package io.mixeway.domain.service.vulnmanager;

import io.mixeway.db.entity.Vulnerability;
import io.mixeway.db.repository.VulnerabilityRepository;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import java.util.Optional;

/**
 * @author gsiewruk
 */
@Service
public class CreateOrGetVulnerabilityService {
    private final VulnerabilityRepository vulnerabilityRepository;

    public CreateOrGetVulnerabilityService(VulnerabilityRepository vulnerabilityRepository){
        this.vulnerabilityRepository = vulnerabilityRepository;
    }

    public Vulnerability createOrGetVulnerability(String name){
        Optional<Vulnerability> vulnerability = vulnerabilityRepository.findByName(name);
        if (vulnerability.isPresent()){
            return vulnerability.get();
        } else {
            Vulnerability newVuln = new Vulnerability(name);
            newVuln = vulnerabilityRepository.save(newVuln);
            return newVuln;
        }
    }

    public Vulnerability createOrGetVulnerabilityWithDescAndReferences(String name, String description, String references, String recommendation) {
        Optional<Vulnerability> vulnerability = vulnerabilityRepository.findByName(name);
        if (vulnerability.isPresent() && StringUtils.isNotBlank(vulnerability.get().getRecommendation())) {
            return vulnerability.get();
        } else if (vulnerability.isPresent() && StringUtils.isBlank(vulnerability.get().getRecommendation())){
            vulnerability.get().setRecommendation(recommendation);
            vulnerability.get().setRefs(references);
            vulnerabilityRepository.save(vulnerability.get());
            return vulnerability.get();
        }
        else {
            Vulnerability newVuln = new Vulnerability(name, description, references,recommendation);
            newVuln = vulnerabilityRepository.save(newVuln);
            return newVuln;
        }
    }
    public Vulnerability createOrGetVulnerabilityWithRecommendationAndReferences(String name, String references, String recommendation) {
        Optional<Vulnerability> vulnerability = vulnerabilityRepository.findByName(name);
        if (vulnerability.isPresent() && StringUtils.isNotBlank(vulnerability.get().getRecommendation())) {
            return vulnerability.get();
        } else if (vulnerability.isPresent() && StringUtils.isBlank(vulnerability.get().getRecommendation())){
            vulnerability.get().setRecommendation(recommendation);
            vulnerability.get().setRefs(references);
            vulnerabilityRepository.save(vulnerability.get());
            return vulnerability.get();
        }
        else {
            Vulnerability newVuln =new Vulnerability(name, references,recommendation);
            newVuln = vulnerabilityRepository.save(newVuln);
            return newVuln;
        }
    }
}
