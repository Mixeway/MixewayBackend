package io.mixeway.domain.service.projectvulnerability;

import io.mixeway.db.entity.*;
import io.mixeway.db.repository.ProjectVulnerabilityAuditRepository;
import io.mixeway.utils.ProjectAudit;
import io.mixeway.utils.VulnerabiltyAudit;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class FindProjectVulnerabilityAuditService {

    private final ProjectVulnerabilityAuditRepository projectVulnerabilityAuditRepository;

    public List<VulnerabiltyAudit> getCodeVulnerabilityHistory(CodeProject codeProject, String location, Vulnerability vulnerability){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByCodeProjectAndLocationAndVulnerability(codeProject,location,vulnerability);
        projectVulnerabilityAudits.forEach(pva -> vulnerabiltyAudits.add(new VulnerabiltyAudit(pva)));
        return vulnerabiltyAudits;
    }
    public List<VulnerabiltyAudit> getInterfaceHistory(Interface anInterface, String location, Vulnerability vulnerability){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByAnInterfaceAndLocationAndVulnerability(anInterface,location,vulnerability);
        projectVulnerabilityAudits.forEach(pva -> vulnerabiltyAudits.add(new VulnerabiltyAudit(pva)));
        return vulnerabiltyAudits;
    }
    public List<VulnerabiltyAudit> getWebAppHistory(WebApp webApp, String location, Vulnerability vulnerability){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByWebAppAndLocationAndVulnerability(webApp,location,vulnerability);
        projectVulnerabilityAudits.forEach(pva -> vulnerabiltyAudits.add(new VulnerabiltyAudit(pva)));
        return vulnerabiltyAudits;
    }

    public List<VulnerabiltyAudit> getProjectHistory(Project project){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByProject(project);
        projectVulnerabilityAudits.forEach(pva -> vulnerabiltyAudits.add(new VulnerabiltyAudit(pva)));
        return vulnerabiltyAudits;
    }

    public ProjectAudit getProjectAudit(Project project){
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByProject(project);
        double avgTTR = countAverageTimeToResolve(projectVulnerabilityAudits);
        return new ProjectAudit(
                projectVulnerabilityAudits.stream().filter(pva-> pva.getRevtype() ==0).count(),
                projectVulnerabilityAudits.stream().filter(pva-> pva.getRevtype() ==2).count(),
                avgTTR);
    }

    //TODO
    private double countAverageTimeToResolve(List<ProjectVulnerabilityAudit> projectVulnerabilityAudits) {
        return 0.0;
    }
}
