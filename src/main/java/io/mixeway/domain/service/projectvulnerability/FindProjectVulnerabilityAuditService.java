package io.mixeway.domain.service.projectvulnerability;

import io.mixeway.db.entity.*;
import io.mixeway.db.repository.ProjectVulnerabilityAuditRepository;
import io.mixeway.utils.ProjectAudit;
import io.mixeway.utils.VulnerabiltyAudit;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class FindProjectVulnerabilityAuditService {

    private final ProjectVulnerabilityAuditRepository projectVulnerabilityAuditRepository;

    public List<VulnerabiltyAudit> getCodeVulnerabilityHistory(CodeProject codeProject, String location, Vulnerability vulnerability){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByCodeProjectAndLocationAndVulnerability(codeProject,location,vulnerability);
        return convertEvents(projectVulnerabilityAudits);
    }
    public List<VulnerabiltyAudit> getInterfaceHistory(Interface anInterface, String location, Vulnerability vulnerability){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByAnInterfaceAndLocationAndVulnerability(anInterface,location,vulnerability);
        return convertEvents(projectVulnerabilityAudits);
    }
    public List<VulnerabiltyAudit> getWebAppHistory(WebApp webApp, String location, Vulnerability vulnerability){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByWebAppAndLocationAndVulnerability(webApp,location,vulnerability);
        return convertEvents(projectVulnerabilityAudits);
    }

    public List<VulnerabiltyAudit> getProjectHistory(Project project){
        List<VulnerabiltyAudit> vulnerabiltyAudits = new ArrayList<>();
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByProject(project);

        return convertEvents(projectVulnerabilityAudits);
    }

    public ProjectAudit getProjectAudit(Project project){
        List<ProjectVulnerabilityAudit> projectVulnerabilityAudits = projectVulnerabilityAuditRepository.findByProject(project);
        double avgTTR = countAverageTimeToResolve(projectVulnerabilityAudits);
        return new ProjectAudit(
                projectVulnerabilityAudits.stream().filter(pva-> pva.getRevtype() ==0).count(),
                projectVulnerabilityAudits.stream().filter(pva-> pva.getRevtype() ==2).count(),
                avgTTR);
    }


    public List<VulnerabiltyAudit> convertEvents(List<ProjectVulnerabilityAudit> events) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        events.forEach(obj -> {
            try {
                obj.mapDate();
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
        });
        List<VulnerabiltyAudit> summaries = new ArrayList<>();
        ProjectVulnerabilityAudit pvaCurrent = null;
        int currentName = -1; // zmienione z String na int i zainicjowane jako -1
        String currentInsertedStart = null;
        String currentInsertedEnd = null;
        int occurrences = 0;

        for (ProjectVulnerabilityAudit event : events) {
            if (currentName != -1 && (currentName != event.getRevtype() || !currentInsertedEnd.equals(event.getInserted()))) {
                summaries.add(new VulnerabiltyAudit(event, currentInsertedStart, currentInsertedEnd, occurrences));
                occurrences = 0;
            }
            currentName = event.getRevtype();
            if (occurrences == 0) {
                currentInsertedStart = event.getInserted();
            }
            currentInsertedEnd = event.getInserted();
            occurrences++;
            pvaCurrent = event;
        }
        if (currentName != -1) {
            summaries.add(new VulnerabiltyAudit(pvaCurrent, currentInsertedStart, currentInsertedEnd, occurrences));
        }

        return summaries;
    }
    //TODO
    private double countAverageTimeToResolve(List<ProjectVulnerabilityAudit> projectVulnerabilityAudits) {
        return 0.0;
    }
}
