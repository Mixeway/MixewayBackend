package io.mixeway.domain.service.projectvulnerability;

import io.mixeway.db.entity.*;
import io.mixeway.db.repository.ProjectVulnerabilityRepository;
import io.mixeway.domain.service.vulnmanager.VulnTemplate;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * @author gsiewruk
 */
@Service
@RequiredArgsConstructor
@Log4j2
public class DeleteProjectVulnerabilityService {
    private final ProjectVulnerabilityRepository projectVulnerabilityRepository;
    private final VulnTemplate vulnTemplate;

    public void deleteProjectVulnerabilityWithStatus(Project project, Status status, VulnerabilitySource vulnerabilitySource) {
        List<ProjectVulnerability> toRemove = vulnTemplate.projectVulnerabilityRepository.findByProjectAndVulnerabilitySource(project, vulnerabilitySource).filter(v -> v.getStatus().getId().equals(status.getId())).collect(Collectors.toList());
        if (toRemove.size() > 0) {
            vulnTemplate.projectVulnerabilityRepository.deleteAll(toRemove);
            log.info("[ProjectVulnerability] Removed {} Project Vulnerabilities with status {} for project {}", toRemove.size(),status.getName(),project.getName());
        }
    }
    public void deleteRemovedVulnerabilitiesInCodeProject(CodeProject codeProject) {
        List<ProjectVulnerability> toRemove = vulnTemplate.projectVulnerabilityRepository.findByCodeProjectAndStatus(codeProject, vulnTemplate.STATUS_REMOVED);
        if (toRemove.size() > 0) {
            vulnTemplate.projectVulnerabilityRepository.deleteAll(toRemove);
            log.info("[ProjectVulnerability] Removed {} Project Vulnerabilities with status REMOVED for project {}", toRemove.size(),codeProject.getProject().getName());
        }
    }

    public void deleteRemovedVulnerabilitiesInWebApp(WebApp webApp) {
        List<ProjectVulnerability> toRemove = vulnTemplate.projectVulnerabilityRepository.findByWebAppAndStatus(webApp, vulnTemplate.STATUS_REMOVED);
        if (toRemove.size() > 0) {
            vulnTemplate.projectVulnerabilityRepository.deleteAll(toRemove);
            log.info("[ProjectVulnerability] Removed {} Project Vulnerabilities with status REMOVED for project {}", toRemove.size(),webApp.getProject().getName());
        }
    }

    @Transactional
    public void removeByCodeProject(CodeProject codeProject) {
        List<ProjectVulnerability> toRemove = vulnTemplate.projectVulnerabilityRepository.findByCodeProjectAndVulnerabilitySource(codeProject, vulnTemplate.SOURCE_SOURCECODE).filter(v -> v.getStatus().getId().equals(vulnTemplate.STATUS_REMOVED.getId())).collect(Collectors.toList());
        vulnTemplate.projectVulnerabilityRepository.deleteAll(toRemove);
    }
}
