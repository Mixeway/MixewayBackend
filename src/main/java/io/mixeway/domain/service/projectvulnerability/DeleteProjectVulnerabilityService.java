package io.mixeway.domain.service.projectvulnerability;

import io.mixeway.db.entity.CodeProject;
import io.mixeway.db.entity.Project;
import io.mixeway.db.entity.ProjectVulnerability;
import io.mixeway.db.entity.Status;
import io.mixeway.db.repository.ProjectVulnerabilityRepository;
import io.mixeway.domain.service.vulnmanager.VulnTemplate;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * @author gsiewruk
 */
@Service
@RequiredArgsConstructor
@Log4j2
public class DeleteProjectVulnerabilityService {
    private final ProjectVulnerabilityRepository projectVulnerabilityRepository;
    private final VulnTemplate vulnTemplate;

    public void deleteProjectVulnerabilityWithStatus(Project project, Status status) {
        List<Long> toRemove = vulnTemplate.projectVulnerabilityRepository.findByProjectAndVulnerabilitySource(project, vulnTemplate.SOURCE_SOURCECODE).filter(v -> v.getStatus().getId().equals(status.getId())).map(ProjectVulnerability::getId).collect(Collectors.toList());
        int removed =0;
        if (toRemove.size() > 0) {
            removed = vulnTemplate.projectVulnerabilityRepository.deleteProjectVulnerabilityIn(toRemove);
            log.info("Removed {} Project Vulnerabilities with status {} for project {}", removed,status.getName(),project.getName());
        }
    }

    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void removeByCodeProject(CodeProject codeProject) {
        List<ProjectVulnerability> toRemove = vulnTemplate.projectVulnerabilityRepository.findByCodeProjectAndVulnerabilitySource(codeProject, vulnTemplate.SOURCE_SOURCECODE).filter(v -> v.getStatus().getId().equals(vulnTemplate.STATUS_REMOVED.getId())).collect(Collectors.toList());
        vulnTemplate.projectVulnerabilityRepository.deleteAll(toRemove);
    }
}
